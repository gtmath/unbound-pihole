name: unbound + pihole - Build & Push

on:
  push:
    tags:
      - "*"

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/unbound-pihole

jobs:

  build_push:
    runs-on: ubuntu-latest
    name: Build & Push
    permissions:
      packages: write
      contents: read
      
    steps:
      - uses: actions/checkout@v4

      - name: Set Variables
        run: |
          VER=$(cat pihole-docker.version)
          echo "PIHOLE_VERSION=$VER" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=$IMAGE_NAME:$GITHUB_REF_NAME" >> $GITHUB_ENV
      
      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{env.FULL_IMAGE_NAME}}
          build-args: PIHOLE_VERSION=${{env.PIHOLE_VERSION}}

  scan_report:
    runs-on: ubuntu-latest
    name: Build & Push
    needs: build_push
    permissions:
      packages: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Set Variables
        run: |
          VER=$(cat pihole-docker.version)
          echo "PIHOLE_VERSION=$VER" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=$IMAGE_NAME:$GITHUB_REF_NAME" >> $GITHUB_ENV

      - name: Pull Image
        run: |
          docker pull ${{env.FULL_IMAGE_NAME}}
          docker image ls

      - name: Scan Image via Anchore Grype
        uses: anchore/scan-action@v6
        id: scan
        with:
          image: ${{ env.FULL_IMAGE_NAME }}
          fail-build: true
          severity-cutoff: high

      - name: Inspect SARIF Report
        if: always()
        run: cat ${{ steps.scan.outputs.sarif }}

      - name: Upload Vulnerability Report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: ${{ env.GITHUB_REF_NAME }}
          wait-for-processing: true